Q:何时你会想使用远程版本库，而不是将所有工作保存在本地？
A:1.将数据备份在远程服务器上，以防本地资料丢失
  2.需要与伙伴协同开发，使用远程版本库同步编程

Q:为何你希望始终手动地拉取更改，而不是让 Git 自动与你的远程版本库保持同步？
A:1.如果Git自动同步远程版本库，很有可能其他人提交的版本直接覆盖了本地版本，造成文件的丢失，以及版本不可用的情况。

Q:说明Fork、克隆和分支之间的不同。何时使用某种功能而不是另一种？
A:Fork，是指仓库在GitHub服务器上的复制，从某人的GitHub仓库复制到自己的GitHub仓库。Fork的仓库与别人的仓库是相互独立的。
克隆，是指从远程仓库复制到本地仓库或者从别人的终端复制到本地仓库，但是克隆的仓库与远程仓库是相互独立的。
分支，是指在一个仓库中建立不同的支线，虽然分支间版本独立，但仍是一个仓库。
需要将别人的仓库复制到自己的GitHub用“Fork”，需要将仓库复制到本机用“克隆”，需要自己的仓库建立不能的支线用“分支”

Q:拥有远程分支的上次已知状态的副本（存储在本地）有何好处？
A:本地仓库可以知道当前commit是不是领先于上次已知状态的副本，还是同步，还是说产生了分支。能够让我们知道区别，以便判断是否去合并。

Q:何时你会想在独立的分支中而不是直接在 master 中进行更改？两种方法各有何好处？
A:与别人协同开发的时候，为了保证master分支的稳定，更乐意在独立分支更改。或者fork别人项目的时候，为了能pull request。
在独立分支修改，（优）提交pull request时，其他人能清楚的看到本次项目的更改，并给予反馈。对代码进行了审查，提高了代码质量。（缺）但是在独立分支修改，master发生变更时，独立分支还需要合并master，解决冲突后才能发起pull request，再将分支合并到master。解决合并冲突比较麻烦。
在master直接更改，（优）不用解决分支合并的问题，添加功能比较方便。（缺）但是直接提交代码，没有在GitHub发起pull request的请求，很容易将有问题的代码提交到master中，代码质量难以保证。
