Q:查看文件的两个版本之间的差异如何帮助你了解引入的错误？
A:1.若老版本不存在bug，通过版本差异比较，能够快速缩小定位错误的范围。
  2.清晰的差异性，程序员容易回想起为何这样更改，更好排查错误。

Q:从长远来看，能轻松访问文件的整个历史记录将如何提高编程者的效率？
A:1.如果程序出现BUG，通过历史记录进行比对，能够更容易发现错误位置。
  2.访问整个历史记录，能够清晰得看出各个时间阶段，程序功能的变更/新增
  3.若当前版本程序不满足需求，可以回退历史记录版本
  4.不用通过传统的方法管理代码，造成文件管理上的混乱。

Q:你认为，手动选择何时创建提交（像在 Git 中做的那样）与自动保存版本（如 Google Docs 所做的那样）各有何优缺点？
A:自动保存
  优点：定期保存，容易追溯历史记录，有效防止操作员忘记保存的情况。
  缺点：如果保存频繁，可能会产生过多无用的文件。
        对于程序而言，可能语音编译无法通过的版本也被提交上去。
  手动选择
  优点：可以自己选择提交逻辑发生重要变更的文件，追溯历史记录变得更有效。
  缺点：手动选择提交的版本记录，完全取决于程序员本身。如果频繁提交，可能会无效的版本记录。如果隔很久提交，不易追溯历史记录。

Q：你认为一些版本控制系统（例如Git）允许在一次提交中保存多个文件，而其他系统（例如 Google Docs）单独对待每个文件？
1.针对的目标不同，Git更偏向项目工程的管理，因此一次提交需要涉及多个文件。Google Docs更加纯粹地针对文档的管理，没必要提交复数个文件。
2.实现的原理不同，Git把需要管理的文件当做repository，才能实现一次提交保存多个文件。Google Docs则没有这种概念，因而也难以做到多文件管理。

Q:如何使用命令 git log 和 git diff 来查看文件的历史记录？
1.进入指定repository目录
2.使用git log查看所有commit的历史记录，根据提交的message查看版本更新信息。
3.注意git log打印的历史记录，是按时间递减排序的，即新记录在前，老记录在后。
4.在使用git diff之前，需要获取对比的commit id.(前4位即可，该id从git log中查看)
5.使用git diff {commit_id_old} {commit_id_new}对比。new与old比较，绿色显示(+)表示新增行，红色显示(-)表示删除行。

Q:使用版本控制，如何让你更有信心进行有可能会造成破坏的更改？
1.版本可以回退，即使当前版本出现问题，可以轻易回退到历史正常的版本。
2.通过版本比较可以轻易的找到问题，也能够尽快修复当前版本的问题。

Q:现在你已设置了工作空间，你想尝试使用 Git 来做些什么？
1.控制项目版本管理
2.利用历史记录修复BUG
3.尝试用新版本尝试变更，尝试失败能够即使回退