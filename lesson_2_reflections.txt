Q:初始化版本库时会发生什么情况？为什么你需要这样做？
A:1.git init之后会创建一个隐藏的子目录.git，该隐藏目录说明了当前父目录的是一个repository。
2.这样操作后，git才能知道需要对哪些目录进行版本控制管理。
3.而且后期的历史版本的快照也全部依靠.git目录管理。

Q:暂存区与工作目录和版本库有何不同？你认为它具有什么价值？
A:暂存区是临时存放需要提交文件的区域，但它即不构成新的版本库，也不影响工作目录
  价值在于，在每次提交版本之前，可以自由的选择哪些文件需要提交到当前版本库。

Q:如何使用暂存区确保为每项逻辑更改进行一次提交？
A:1.使用git diff 查看暂存区与实际文件的区别
  2.如果觉得需要提交本次逻辑更改，使用git add将文件加入暂存区
  3.在使用git diff --staged 查看repository与暂存区的区别
  4.确保无问题后，使用git commit -m "{message}"，完成逻辑更改提交

Q:在哪些情况下，分支可以帮助你有序地组织历史记录？分支将如何提供帮助？
A:1.对实验的功能（或需求）进行探索
  2.对其他版本的开发
  帮助：使用分支后，在分支上所提交的版本，不影响其他分支，所以可以轻易地切换主版本。不用考虑对主版本造成的影响。
  并且尝试性的功能开发完毕后，分支提供了合并功能，可以让主分支具备新的功能。

分支说明：
1.clone下来的repository只包含主分支，通过git checkout {branch}，若分支已在远程仓库上存在，可以获取远程的分支，然后在本地创建分支。
2.如果使用新的分支，更改master分支，master分支之后没有进行更改。通过git log --graph --online master {branch} 可以发现只有一条路线。因为master之后没有进行新的版本提交，没有产生新的支线，分支的支线是在master的基础上创建的，所以分支支线依旧可达master的header，当master的header发生变化就不一样了。

Q:图表如何帮助你直观显示分支结构？
1.图表能够清晰的看出当前有多少个分支
2.每个分支能够达到的commits
3.哪些commits是不可达的

